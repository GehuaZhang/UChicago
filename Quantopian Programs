import numpy as np
def initialize(context):
    context.stock = symbol('AAPL')

def handle_data(context, data):
    ApplyNum = 5
    TestNum = 20
    PriceMax = 0
    PriceMin = 0
    AllInfoList = []
    HisPriceList = []
    DistrictList = []
    AllInfoList.append(history(bar_count = TestNum, frequency = '1d', field = 'price', ffill=True))

    ReducedInfoList = str(AllInfoList).strip('Equity(24 [AAPL])').strip('[').strip(']').split()
    ReducedInfoListListLen = len(ReducedInfoList)
    PLen = ReducedInfoListListLen/3
    for i in range(1,PLen+1):
        HisPriceList.append(ReducedInfoList[3*i-1])
    PriceMin = float(HisPriceList[0])
    for x in HisPriceList:
        if float(x) > PriceMax:
            PriceMax = float(x)
        elif float(x) < PriceMin:
            PriceMin = float(x)
    MidLine = (PriceMax+PriceMin)/2
    FirstLine = (PriceMax+MidLine)/2
    ThirdLine = (PriceMin+MidLine)/2
    
    for x in HisPriceList:
        if float(x) > FirstLine:
            DistrictList.append(0)
        elif float(x) > MidLine and float(x) < FirstLine:
            DistrictList.append(1)
        elif float(x) > ThirdLine and float(x) < MidLine:
            DistrictList.append(2)
        elif float(x) < ThirdLine:
            DistrictList.append(3)
            
    PTtable = [[0 for i in range(4)] for j in range(4)]

    for i in range(0,len(DistrictList)-1):
        PTtable[DistrictList[i]][DistrictList[i+1]]+=1
    
    TotalTrans = float(TestNum - 1)
    
    for i in range(4):
        for j in range(4):
            PTtable[i][j] = round(PTtable[i][j]/TotalTrans,3)
    
    PTMatrix = np.array(PTtable)
    
    InitialStateDistrict = DistrictList[-ApplyNum:]
    InitialStateTable = [0 for i in range(4)]
    
    for i in range(0,len(InitialStateTable)-1):
        InitialStateTable[InitialStateDistrict[i]]+=1

    InitialStateMatrix = np.array(InitialStateTable)
    print InitialStateMatrix * PTMatrix

    
    
